%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 377.000000 140.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 377 140
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 377 140
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /zero put
dup 34 /eight put
dup 35 /four put
dup 36 /one put
dup 37 /five put
dup 38 /two put
dup 39 /six put
dup 40 /three put
dup 41 /seven put
dup 42 /nine put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C70002002AFFF5020202C50017003300CBB800342FB800352FB8003410B80018D0B800182FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8003510B80026DCB8000EDC410500DA000E00EA000E00025D411B0009000E0019000E0029000E0039000E0049000E0059000E0069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E000D5D00BA0013001F00032BB8001310BA002D000700032BB8002D10303113343E0433321E0415140E0223222E0227141E0433323E0435342E0423220E0484010911213224243221110901051B3C36363C1B055A04101E344F37384E341E100404101E344F37374F341E1004015D1A3F3F3C2D1C1C2D3C3F3F1A2863573C3C57632727545047361F1F364750542727545048362020364850540000000100570000016402C5000A0023BA0001000900032BB800011000B800012FB800002FBA0007000800032BB800071030312111230E03231533110164410726374424B802C528341E0B44FE0400010018000001EE02C5002B0091B8002D2FBA0001000000032BB8000110B8002D10B80022DCB8000BDC410500DA000B00EA000B00025D411B0009000B0019000B0029000B0039000B0049000B0059000B0069000B0079000B0089000B0099000B00A9000B00B9000B00C9000B000D5DB8002210B80016D0B800162FB8000110B80018D0B800182F00BA0018001500032BBA0027000600032BB800271030311333263E0233321E0215140E02070E03072135213E03373E0335342E0223220E022C55010F2235251C322516172D442D254436230501CFFE940627374221213E301D233C512E38583B1C01CA203F321F12



00>] def
/CharStrings 12 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
/six 7 def
/seven 8 def
/eight 9 def
/nine 10 def
/uni2B91 11 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B64DFC330C1264D9E86DB21FFDE360EA73793134E310C35764956599F33D100A43A4E3DEAEEC09ED860F76048E234C00CF4055CF671E0F66D4F89095ECECEF7393056FEE33F2F50AB369B1E97BD4D6C93AD86197757D4563B738EE03BA985846BBFAF2307412DC7051A0CEE3E5D4CC7C63FA637D28DBE0069B3ABA784B4969CB725534E89C88B15562216FE868A01E336A8D7B3A6A7F92FA22B9289A2771D33700CDB9B8E71731F499BCA3E35DD77934AE78A2068561A883A69546AC49FB3A7A6F7880409C496C88A2E6289F38F89DBA4ECB1C0113469E8AAAEF8055393D349F4B2A424DDB070302718F1A3BC5290EBA5231E254B995E0F69519FE6BD6F94A843C92C1F8DD47C687E7D18A1EBAD2D663751FEDB3AAF74AB1F7F4385DE6BA9959C8711D22819B5EA69A38EC7AEE2B67966EB3CC5427C4B601510B81EDFA7E5D39CFD2EE902B8E15C9EF5ECC46A7E73EB469A650130ABD94F7E630AFEAE5BD1829F91D734BE0E277BDD83F7B97C0F2C39E09808BD15B6DAB81C655803C3A4706A512A15576427E79730390F08DDAF8F796CB2DDB057B49165B4F2FA2DC491E41C3361A473A89A504C3AC434BAE1F96EC09D61302A0305490CB4B9027C86A335401FDC2092F8DE9F9F47A17BC8CB5DACF83B0FCA964251B275E5CBF6AD79EFC2A711082CC6D0E5AB9D3E47D3F1DDF55B3C50E718B0258551B87C4FD3AF632FC4442D17501C5DDAC8D652030A96043D5F5D4DBEF4FE1C0F912022AE1DC8C920A147A
66B69C29D7B4D57ACA33518EED3FAE0B317866B8871BB2E79196A70A2137803E602CD7D304F08E23F280DEB408D4D7C3E5C427DD5A859627A03E12C8322A69767F43560A69DBD1BE4380E5D455710659B7982C7AC1AFA7CAF99997AE0DFE6481F7130B0563438240CF7516B074EF083094858834556C14526070C6BFD39576DF3D427DC0BBDE2A415D5500883AD94542361134BC94E4D601D296E8B1CDF8D5C3C65A18D48636C57FD715258F99A42951929AF63C09F231573B81A21FCC881BAD2D5FDD68408C80BB6A0ECCE1B2F26EDD699B4519D82DDFA7F56D82AC3418503EB059C3DC2D0444621CD85BD504E65087B475FA0D053923AAD2FDE5DABFDF09BAB818125770D45742676C53A53E9148D5FD9EE94340734EFB0E32990BDF0B0E82D791380B0538FA59897900BEA01BC48222D8D74EF96BFDE515D80B184C87D90A18E137BFD14A9681700CDAF9EF3D9F260EDB465BBE775DD40BD57AE67E79DD071402BFF3FD23B15E86607A2EEA606D296B72FF4C5CFA804144862D807B483BD8E041160563CB4BAEF8BD9AF5082D8B40312F312F3C0F74A4BF387209CD79B6ED2507D2BCF700181B98557E727D4A2E2E1D2A69E58399FFECC8C2F9AE8CC0941B2684535F393FE2A7797CAFDC25FBE2C0A3A123BB68B52CFFF4643D4B07431C88E6215007B5BD4D188BE67F8FEFAAE58CB512FBE36FFA1F484DE04663569C8AE9EA6492A38D5CF7D0DB59AB9BB2BEC8F8181DCEB31032751867D2DDB336486A7EF8B3B4BB801BF6BD5DCC6192261F3CEF756FE5C8DC508D433CC2507FDC0A3671D337029653FC0979942AE8A727D82DB0E9984C87EE2CCCFAC6E641B788D61DCF7E1525E3E7DE296ACB250DEF837007CB89C57B7615DAD257D09CB24B1FF484C1515FF0364AC1E7AE7C87239C0DE7CC83EACBCE52927060414C5F021B8A1512C1F20C1AD65FFD97ADA45B2F9C32C752E56827AFAF518FEA79FA142E1B4C2F868A033929B43BA588E38719ED965C03D77DA6530C2893E235985318FB7909369368DCC4AA9182BC6296E56F197549DE89649A33F927B76DF7663447BC6C78BB1C9960FA232BAF30372A7040EB98C3057196C194D9E6386197F2A37FF510B302B8751D0BC3692607C8B76CD0A8EC6107BDFAB70DB07E1E029C25A29EF96F8765FF2B29DC5732A1C9887022B18423E3AD7D7E1080382CED523E56ABD8DCABC9ADDCACD6DB235083ABFB6B1E8435197CDF6F2AAAF998B9F8C3530399123292643BD324DD7981B5A3D4B54F49A77822DAF5EFFDD0D45029298429C70F5910D6A09D3785D837EAFCE6957720FAA88EB8522FFC6049D5E82160274D7E2D2DFBCBA09005E951B4911C0D1A5516D25B2DA2FA3AF2EADD9A812CD2DC78F4D956ABF9F93E9D5ADE33024C1A4C70054032715D36B3B0B783E3586A6520CF3880BDC1C0316A47F8
BF9DBD4C1763520AD0319F2EEAB39EAB36824713B3D9E36DC16F75DAB104E4565371418F14D7107DEC86757AEBFB2C1B7BC9B4149AEA2FEC467B822D1C639EDE67F55DC58C87A94F1C5BCCC8CDA0DFF74FB323135FA0F8338759C9F29A0561336D19CD097D22C6F71FDB955661886ADF125EB1D16B5F0D20A1008E3994D2FAA5F0F72ADD02E8C2BD6ADCA7E411FF57665FDE91F04F890D668D31DBFB3CAB3EA2EF7092B7671E4FFDF1EE067D60F4C1BBAD2245D703DF7D503080E67AD147CDE11794589F305271285083DA69197D79E03950E8454293B142DBA131A03EED5895845F7DC8A37B47DAD80CE7AD7C298A40AD81C148777ABA4EF3127C0C440A953245F3D4DA7FCBEF6F4A47E031D3716945ADA7DDB9BF939DA9707875C9B9EC95A9AB240FBCAABB0D0D88CD2FE4E23D3246D04CDADB335658A43E35C0B82CB3D4485242B81C84CEBA00DAEFBF7BD44F8D1D5F52E3B3DEAAE035DE0B264EC348D2D92EE28F04175625F111512E956A4DB6453844A925372E604729ACB7FC9BAA489B5784BF94356D7D35D45644FA79A1CD2337AE1703E9D057E08FA3E82D03611BC8BC534B87FE1C6E7569E45AE3F6E18C83AD60FE984F0EF956693648BBBB04151CF2DAE6D49460F500A460A2A072E0984F37C93E73ACBDA0A749239B59A2986B861EF3F4B8B92CC0E00CF76A3436E6660C3B09A66BB8D351F16DBD8703E8853E61BC6186B14DC7C2A2F8CB94CD0831B7A1F9520B035387E2616A8B19A6B2F8D8AD5494F432804E7AF4B9EEB0E49A54F761CDCC36131717908378910EC2D81D9524CAE93BB0A883BD0BAEA459E406E47F2DB4A2A019F7AFD980A4141A2C34DA9464FC5758CDCAD3260812B21ECEFE807673BA8FC9D443FA18347C20D008DB945A94B337FC1DB81797E1D3AB3A873C7755A6169A74022575BB274729E8114F556C46A41F6F4765EDBC9678BC0352C7FC83E0C9252062605DC49536E9AD5CB239965C3C9E5757F51A7F21AE04DDE58C0D9552BDBBD889AA9B755E97DC2F62E5274B8780A28595A43A5EC01D5927C1BF23735308A32C952AA318DEAA083F28C69470A8731A6E255B3F8F85CF379F1E8932DE9F58779405CE2C3C69A0B96D889A41B3453D47A4AF752C5A32BD6551CBC7518A54BF465DBE7176D1AD7C350C98906E7D42D0BB9474FF94BF3A15CC06CE9EDA07EACEAEBC3A710F975FFB8D606D2F99353FB70A210687AC00DDCC9F102E43063A28EFE8110C22B8F1652F73AFEEC577BEEB5EF5E989FB93BCE2F4BDA5F43743085ECB1B341946DE004BF55EE3A2E220649428B180720C1126B4F9652F031EEA616243E96A52596BCBFDDE74C2CE8D654FB773BA11205AE857DFA8E783BF772229AC45406B2307F5AC1EA3F657C46FC3A82B53D85AA377683A3D3847DFF14C7FBDA968065AB071D85CD1CE848FF7108C3398
11BA61BD9CDF83AA5132BE528F87588B775E435C02D5CE23C52064A417EDF3292D3771FF4992402C89B6844C539D5405ED793DCA91A400355E5B68CCAFCA4170C07C3E77E5F6471A2F6CAA86BC550A424CF485DFD0F09CADE2891EA3E0492FC44871DD2E61218D857E58F52163D1730F08D84039D96DCEE080DFEE06FE07E76C51593C59776E54CE4BAFE7711DC7EBACF2CF39F9D78C9337C00FE920917B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /five put
dup 34 /three put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/three 1 def
/five 2 def
/uni2B90 3 def
/uni2B91 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4037426 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C959DCA2B25064CB2EE653C8C5E0D08068DD956094993D87692D1893E7882B3267FBEDEB6776297FEA99C681B11228C21FCD8CEF48BA467B0450225729846B0141D233872E403C84738E77CFF3084361E03A931465F27CEE1E7DFC845CD73A89E670A7F542FA3184DD2050CD63B3DBC94A57D1F1DE3078D9946AB702D765AA8A2E13DF569B140CEF00A0688F44B60B6A3517498EF2C1C3676E7B9B3AAC2FD272DD6580BA668EB55DC16957C78F72E8749DBB3F6A5B9B66EF85F4940168CBE3CB29D26E61C97C17B7B3C0B814ACF6E246866943F14456173A353D010A7CD8C3935A10B67C19C72C1808E6074D8DD7C3CB55DB0DE44A28E1D0D4041521EBB05F026591C827A0C75BA7A1E87CF30CC1C436D99A4612065A26025D80293A829D55AEB44FA45545363CD0D1A5BB53FDE227E89AA78E6428AF560F77228DC67D2FDE038824CA60EAFCA047F54BB7D4A62D49DD50B152A1DA07A1022AE6DC82C3A570E02379B6EF918C82E993DFE7DFFAF6265D8A653A73B6439E169D1D1995E12F732474B8A77CE584D021B1CA149AE0410C728401A215BEF8B24CBA696FCAF83659BC6D3D15ACC597D22A047ECB886E85C8A173E9769AF565A2F8501EA0B5FB06E13B26F60162A598897B5E7651119F0A9ABB73CC787723ABF6F3AD4F751F20D4B89EB122A5330CE2710E358305D5348F1DEECB88511C5B49ED442E410DEA4A2396F28A2DA04D0E3D773EC487052A8B88C173D649932CA812CFF4E1036AE02F9EE50B757
2620014FD85790F42EF3DA188F79338764CEED230F39B5DE4C7840F1C8DC72A0B911EEAAFE4D617E39DC240A9173EA9C0F568D67E8237CD982CB4B6CD8042D259D2197E64BBF745BFD8C737FDB8BE4382E3EA24535883005FE75543C479D780C47EE184284C8C5DFD2D9FB1A73145EB5698BC70EAA03BCBFE2A569E940C1DF5B6A663A8EDD7CAB599CC212FFB3D0496D5D45D647627AAD4327C5D5EBB8AB048661A0D5CB2AFE64ACA12FFE7A83E2274B8523611413EA1210C17BD859BB10FC52D5CA51CA4395E8ECE9FB10034FDBFBB529F4897932871B2D3EC2CB5034197B9C0FA9275F09D3956FBDF333CD43FE4D872043365326EE9590A2E0807F0A8C62C0FB47071757EB0F4C1FC4585EF0EB98B2511C2440E485A018281F95B22743FB4F9ED14028B43D41DFF25AE32CA5DA0B1DE25FF675D47977E177CADE0327AEFEAFBEF03DAA4A48E10BC73736965BE884FF429771CF2A2C97D6223B2F765460F3BFEAA1318D2F34A2CAE4E6E191045D8F5EF5E1FEDC9F645F25C54FE41B6AA68022
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F2.1/HelveticaNeue-Bold renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 377 140 rc
0 140 m
377 140 l
377 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-2038.3535 1530.9799 m
3454.5757 1530.9799 l
3454.5757 -2363.9697 l
-2038.3535 -2363.9697 l
h
-2038.3535 1530.9799 m
f
0.80000001 0.80000001 0.80000001 sc
1.2375393 84.587212 m
30.237539 84.587212 l
30.237539 54.587215 l
1.2375393 54.587215 l
h
1.2375393 84.587212 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 1243 881 cm
-1241.7625 796.41278 m
-1212.7625 796.41278 l
-1212.7625 826.41278 l
-1241.7625 826.41278 l
h
-1241.7625 796.41278 m
S
0 i
/F1.1[ 16 0 0 -16 0 0]sf
-1231.7104 816.41278 m
(!)s
0.80000001 0.80000001 0.80000001 sc
CM
277.68198 84.587212 m
306.68198 84.587212 l
306.68198 54.587215 l
277.68198 54.587215 l
h
277.68198 84.587212 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 1243 881 cm
-965.31799 796.41278 m
-936.31799 796.41278 l
-936.31799 826.41278 l
-965.31799 826.41278 l
h
-965.31799 796.41278 m
S
/Cs1 SC
0 sc
0 i
-955.26599 816.41278 m
(")s
/Cs2 SC
0.80000001 0.80000001 0.80000001 sc
CM
139.45976 84.587212 m
168.45976 84.587212 l
168.45976 54.587215 l
139.45976 54.587215 l
h
139.45976 84.587212 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 1243 881 cm
-1103.5403 796.41278 m
-1074.5403 796.41278 l
-1074.5403 826.41278 l
-1103.5403 826.41278 l
h
-1103.5403 796.41278 m
S
/Cs1 SC
0 sc
0 i
-1093.4883 816.41278 m
(#)s
0.60000002 i
/Cs2 SC
0 0 0 sc
-1207.2069 796.41278 m
-1178.2069 796.41278 l
-1178.2069 826.41278 l
-1207.2069 826.41278 l
h
-1207.2069 796.41278 m
S
/Cs1 SC
0 sc
0 i
-1197.1549 816.41278 m
($)s
0.60000002 i
/Cs2 SC
0 0 0 sc
-1068.9847 796.41278 m
-1039.9847 796.41278 l
-1039.9847 826.41278 l
-1068.9847 826.41278 l
h
-1068.9847 796.41278 m
S
/Cs1 SC
0 sc
0 i
-1058.9327 816.41278 m
(%)s
0.60000002 i
/Cs2 SC
0 0 0 sc
-1172.6514 796.41278 m
-1143.6514 796.41278 l
-1143.6514 826.41278 l
-1172.6514 826.41278 l
h
-1172.6514 796.41278 m
S
/Cs1 SC
0 sc
0 i
-1162.5994 816.41278 m
(&)s
0.60000002 i
/Cs2 SC
0 0 0 sc
-1034.4291 796.41278 m
-1005.4291 796.41278 l
-1005.4291 826.41278 l
-1034.4291 826.41278 l
h
-1034.4291 796.41278 m
S
/Cs1 SC
0 sc
0 i
-1024.3771 816.41278 m
(')s
0.60000002 i
/Cs2 SC
0 0 0 sc
-1138.0958 796.41278 m
-1109.0958 796.41278 l
-1109.0958 826.41278 l
-1138.0958 826.41278 l
h
-1138.0958 796.41278 m
S
/Cs1 SC
0 sc
0 i
-1128.0438 816.41278 m
(\()s
0.60000002 i
/Cs2 SC
0 0 0 sc
-999.8736 796.41278 m
-970.8736 796.41278 l
-970.8736 826.41278 l
-999.8736 826.41278 l
h
-999.8736 796.41278 m
S
/Cs1 SC
0 sc
0 i
-989.82159 816.41278 m
(\))s
0.60000002 i
/Cs2 SC
0 0 0 sc
-930.76245 796.41278 m
-901.76245 796.41278 l
-901.76245 826.41278 l
-930.76245 826.41278 l
h
-930.76245 796.41278 m
S
/Cs1 SC
0 sc
0 i
-920.71045 816.41278 m
(*)s
/Cs2 SC
0.80000001 0.80000001 0.80000001 sc
CM
346.79309 84.587212 m
375.79309 84.587212 l
375.79309 54.587215 l
346.79309 54.587215 l
h
346.79309 84.587212 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 1243 881 cm
-896.20691 796.41278 m
-867.20691 796.41278 l
-867.20691 826.41278 l
-896.20691 826.41278 l
h
-896.20691 796.41278 m
S
/Cs1 SC
0 sc
0 i
-890.60291 816.41278 m
($!)[ 8.896000 0.000000 ] xS
/Cs2 SC
0 0 0 sc
CM
304.64307 50.419022 m
304.64307 49.99966 305.46179 37.767925 283.62085 36.637295 c
261.78 35.506561 229.05536 37.836281 225.73291 35.319801 c
222.41031 32.803139 223.24086 29.867214 223.24086 29.867214 c
223.24086 29.867214 222.48431 35.45647 228.1496 36.32349 c
233.81454 37.190609 272.56567 36.123215 288.34769 38.220253 c
304.12985 40.317501 304.64307 50.838505 304.64307 50.419022 c
h
304.64307 50.419022 m
f
0.5 w
0.60000002 i
1 0 0 -1 1243 881 cm
-938.35693 830.58099 m
-938.35693 831.00037 -937.53821 843.23206 -959.37915 844.36273 c
-981.22003 845.49341 -1013.9446 843.1637 -1017.2671 845.68018 c
-1020.5897 848.19684 -1019.7592 851.13281 -1019.7592 851.13281 c
-1019.7592 851.13281 -1020.5157 845.54352 -1014.8504 844.67651 c
-1009.1854 843.80939 -970.43433 844.87677 -954.65234 842.77972 c
-938.87012 840.6825 -938.35693 830.1615 -938.35693 830.58099 c
h
-938.35693 830.58099 m
S
0 i
CM
141.49869 50.419022 m
141.49869 49.99966 140.67996 37.767925 162.52089 36.637295 c
184.36174 35.506561 217.08638 37.836281 220.40883 35.319801 c
223.73145 32.803139 222.90089 29.867214 222.90089 29.867214 c
222.90089 29.867214 223.65744 35.45647 217.99216 36.32349 c
212.32719 37.190609 173.57607 36.123215 157.79407 38.220253 c
142.01189 40.317501 141.49869 50.838505 141.49869 50.419022 c
h
141.49869 50.419022 m
f
0.60000002 i
1 0 0 -1 1243 881 cm
-1101.5013 830.58099 m
-1101.5013 831.00037 -1102.3201 843.23206 -1080.4791 844.36273 c
-1058.6383 845.49341 -1025.9136 843.1637 -1022.5912 845.68018 c
-1019.2686 848.19684 -1020.0991 851.13281 -1020.0991 851.13281 c
-1020.0991 851.13281 -1019.3426 845.54352 -1025.0078 844.67651 c
-1030.6729 843.80939 -1069.424 844.87677 -1085.2059 842.77972 c
-1100.9882 840.6825 -1101.5013 830.1615 -1101.5013 830.58099 c
h
-1101.5013 830.58099 m
S
0 i
CM
4.9104214 88.755409 m
4.9104214 89.174774 4.0916882 101.40651 25.932619 102.53713 c
47.773479 103.66787 80.498108 101.33815 83.820557 103.85463 c
87.143166 106.37129 86.312614 109.30721 86.312614 109.30721 c
86.312614 109.30721 87.069168 103.71796 81.403885 102.85094 c
75.73893 101.98382 36.987801 103.05122 21.205791 100.95418 c
5.4236174 98.856934 4.9104214 88.335922 4.9104214 88.755409 c
h
4.9104214 88.755409 m
f
0.60000002 i
1 0 0 -1 1243 881 cm
-1238.0896 792.24457 m
-1238.0896 791.82526 -1238.9083 779.59351 -1217.0674 778.46289 c
-1195.2266 777.33215 -1162.5018 779.66187 -1159.1794 777.14539 c
-1155.8568 774.62872 -1156.6874 771.69281 -1156.6874 771.69281 c
-1156.6874 771.69281 -1155.9308 777.28204 -1161.5961 778.14905 c
-1167.2611 779.01617 -1206.0122 777.94879 -1221.7942 780.04584 c
-1237.5764 782.14307 -1238.0896 792.66406 -1238.0896 792.24457 c
h
-1238.0896 792.24457 m
S
0 i
CM
168.05478 88.755409 m
168.05478 89.174774 168.87352 101.40651 147.03259 102.53713 c
125.19173 103.66787 92.467094 101.33815 89.144646 103.85463 c
85.822037 106.37129 86.652588 109.30721 86.652588 109.30721 c
86.652588 109.30721 85.896034 103.71796 91.561317 102.85094 c
97.22628 101.98382 135.9774 103.05122 151.75941 100.95418 c
167.5416 98.856934 168.05478 88.335922 168.05478 88.755409 c
h
168.05478 88.755409 m
f
0.60000002 i
1 0 0 -1 1243 881 cm
-1074.9452 792.24457 m
-1074.9452 791.82526 -1074.1265 779.59351 -1095.9674 778.46289 c
-1117.8082 777.33215 -1150.533 779.66187 -1153.8553 777.14539 c
-1157.178 774.62872 -1156.3474 771.69281 -1156.3474 771.69281 c
-1156.3474 771.69281 -1157.104 777.28204 -1151.4387 778.14905 c
-1145.7737 779.01617 -1107.0226 777.94879 -1091.2406 780.04584 c
-1075.4584 782.14307 -1074.9452 792.66406 -1074.9452 792.24457 c
h
-1074.9452 792.24457 m
S
0 i
CM
280.34088 88.755409 m
280.34088 89.174774 279.86188 101.40651 292.64023 102.53713 c
305.41852 103.66787 324.56451 101.33815 326.50836 103.85463 c
328.4523 106.37129 327.96637 109.30721 327.96637 109.30721 c
327.96637 109.30721 328.409 103.71796 325.09445 102.85094 c
321.78009 101.98382 299.10822 103.05122 289.87473 100.95418 c
280.64114 98.856934 280.34088 88.335922 280.34088 88.755409 c
h
280.34088 88.755409 m
f
0.60000002 i
1 0 0 -1 1243 881 cm
-962.65912 792.24457 m
-962.65912 791.82526 -963.13812 779.59351 -950.3598 778.46289 c
-937.58148 777.33215 -918.43549 779.66187 -916.49164 777.14539 c
-914.54773 774.62872 -915.03363 771.69281 -915.03363 771.69281 c
-915.03363 771.69281 -914.591 777.28204 -917.90558 778.14905 c
-921.21991 779.01617 -943.89178 777.94879 -953.12531 780.04584 c
-962.35889 782.14307 -962.65912 792.66406 -962.65912 792.24457 c
h
-962.65912 792.24457 m
S
0 i
CM
375.79077 88.755409 m
375.79077 89.174774 376.26978 101.40651 363.49142 102.53713 c
350.71313 103.66787 331.56714 101.33815 329.62329 103.85463 c
327.67935 106.37129 328.16528 109.30721 328.16528 109.30721 c
328.16528 109.30721 327.72266 103.71796 331.0372 102.85094 c
334.35156 101.98382 357.02344 103.05122 366.25693 100.95418 c
375.49051 98.856934 375.79077 88.335922 375.79077 88.755409 c
h
375.79077 88.755409 m
f
0.60000002 i
1 0 0 -1 1243 881 cm
-867.20923 792.24457 m
-867.20923 791.82526 -866.73022 779.59351 -879.50854 778.46289 c
-892.28687 777.33215 -911.43286 779.66187 -913.37671 777.14539 c
-915.32068 774.62872 -914.83472 771.69281 -914.83472 771.69281 c
-914.83472 771.69281 -915.27734 777.28204 -911.96283 778.14905 c
-908.64844 779.01617 -885.97656 777.94879 -876.7431 780.04584 c
-867.50952 782.14307 -867.20923 792.66406 -867.20923 792.24457 c
h
-867.20923 792.24457 m
S
/Cs1 SC
0 sc
0 i
/F2.1[ 21 0 0 -21 0 0]sf
-1162.3553 766.32672 m
(!)s
-1025.7671 870 m
(!)s
-920.47662 767.99475 m
(")s
ep
end
%%Trailer
%%EOF
